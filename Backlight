//#include <Adafruit_NeoPixel.h>
//#include <GyverTimer.h>
#include <FS.h>               //this needs to be first, or it all crashes and burns...
#define BLYNK_PRINT Serial//Comment this out to disable prints and save space
#include <ESP8266WiFi.h>
#include <DNSServer.h>
#include <ESP8266WebServer.h>
#include <WiFiManager.h>      //https://github.com/tzapu/WiFiManager
#include <ArduinoJson.h>      //https://github.com/bblanchon/ArduinoJson
#include <SPI.h>
#include <SimpleTimer.h>
#include <BlynkSimpleEsp8266.h>
#include <EEPROM.h>


// ************************** НАСТРОЙКИ ***********************
#define CURRENT_LIMIT 2000  // лимит по току в миллиамперах, автоматически управляет яркостью (пожалей свой блок питания!) 0 - выключить лимит
#define NUM_STRIPS 1        // количество отрезков ленты (в параллели)
#define BRIGHTNESS 250      // начальная яркость
#define FIRE_PALETTE 0      // разные типы огня (0 - 3). Попробуй их все! =)

int brightness = BRIGHTNESS;


// ****************************** Настройка либы светодиодов ******************************
#define FASTLED_ESP8266_RAW_PIN_ORDER
#include <FastLED.h>
#define LED_PIN    5
#define NUM_LEDS 131
#define COLOR_ORDER RGB

#define WIDTH 131              // ширина матрицы
#define HEIGHT 1            // высота матрицы
#define MATRIX_TYPE 0         // тип матрицы: 0 - зигзаг, 1 - параллельная
#define MODE_AMOUNT 18
#define SEGMENTS 1            // диодов в одном "пикселе" (для создания матрицы из кусков ленты)

CRGB leds[NUM_LEDS];
CRGBPalette16 gPal;


struct {
  byte brightness = 50;
  byte speed = 99;
  byte scale = 60;
} modes[MODE_AMOUNT];

unsigned char matrixValue[131][1];

// ================================= слежебные ====================================

// функция получения цвета пикселя по его номеру
uint32_t getPixColor(int thisSegm) {
  int thisPixel = thisSegm * SEGMENTS;
  if (thisPixel < 0 || thisPixel > NUM_LEDS - 1) return 0;
  return (((uint32_t)leds[thisPixel].r << 16) | ((long)leds[thisPixel].g << 8 ) | (long)leds[thisPixel].b);
}



// **************** НАСТРОЙКА МАТРИЦЫ ****************
#if (CONNECTION_ANGLE == 0 && STRIP_DIRECTION == 0)
#define _WIDTH WIDTH
#define THIS_X x
#define THIS_Y y

#elif (CONNECTION_ANGLE == 0 && STRIP_DIRECTION == 1)
#define _WIDTH HEIGHT
#define THIS_X y
#define THIS_Y x

#elif (CONNECTION_ANGLE == 1 && STRIP_DIRECTION == 0)
#define _WIDTH WIDTH
#define THIS_X x
#define THIS_Y (HEIGHT - y - 1)

#elif (CONNECTION_ANGLE == 1 && STRIP_DIRECTION == 3)
#define _WIDTH HEIGHT
#define THIS_X (HEIGHT - y - 1)
#define THIS_Y x

#elif (CONNECTION_ANGLE == 2 && STRIP_DIRECTION == 2)
#define _WIDTH WIDTH
#define THIS_X (WIDTH - x - 1)
#define THIS_Y (HEIGHT - y - 1)

#elif (CONNECTION_ANGLE == 2 && STRIP_DIRECTION == 3)
#define _WIDTH HEIGHT
#define THIS_X (HEIGHT - y - 1)
#define THIS_Y (WIDTH - x - 1)

#elif (CONNECTION_ANGLE == 3 && STRIP_DIRECTION == 2)
#define _WIDTH WIDTH
#define THIS_X (WIDTH - x - 1)
#define THIS_Y y

#elif (CONNECTION_ANGLE == 3 && STRIP_DIRECTION == 1)
#define _WIDTH HEIGHT
#define THIS_X y
#define THIS_Y (WIDTH - x - 1)

#else
#define _WIDTH WIDTH
#define THIS_X x
#define THIS_Y y
#pragma message "Wrong matrix parameters! Set to default"

#endif


// получить номер пикселя в ленте по координатам
uint16_t getPixelNumber(int8_t x, int8_t y) {
  if ((THIS_Y % 2 == 0) || MATRIX_TYPE) {               // если чётная строка
    return (THIS_Y * _WIDTH + THIS_X);
  } else {                                              // если нечётная строка
    return (THIS_Y * _WIDTH + _WIDTH - THIS_X - 1);
  }
}

// функция получения цвета пикселя в матрице по его координатам
uint32_t getPixColorXY(int8_t x, int8_t y) {
  return getPixColor(getPixelNumber(x, y));
}

// функция отрисовки точки по координатам X Y
void drawPixelXY(int8_t x, int8_t y, CRGB color) {
  if (x < 0 || x > WIDTH - 1 || y < 0 || y > HEIGHT - 1) return;
  int thisPixel = getPixelNumber(x, y) * SEGMENTS;
  for (byte i = 0; i < SEGMENTS; i++) {
    leds[thisPixel + i] = color;
  }
}




// ================================= ЭФФЕКТЫ ====================================

// --------------------------------- конфетти ------------------------------------
void fadePixel(byte i, byte j, byte step) {     
  int pixelNum = getPixelNumber(i, j);
  if (getPixColor(pixelNum) == 0) return;

  if (leds[pixelNum].r >= 30 ||
      leds[pixelNum].g >= 30 ||
      leds[pixelNum].b >= 30) {
    leds[pixelNum].fadeToBlackBy(step);
  } else {
    leds[pixelNum] = 0;
  }
}

void fader(byte step) {
  for (byte i = 0; i < WIDTH; i++) {
    for (byte j = 0; j < HEIGHT; j++) {
      fadePixel(i, j, step);
    }
  }
}


void sparklesRoutine() {
  for (byte i = 0; i < modes[1].scale; i++) {
    byte x = random(0, WIDTH);
    byte y = random(0, HEIGHT);
    if (getPixColorXY(x, y) == 0)
      leds[getPixelNumber(x, y)] = CHSV(random(0, 255), 255, 255);
  }
  fader(70);
}




// -------------------------------------- огонь ---------------------------------------------
// эффект "огонь"
#define SPARKLES 1        // вылетающие угольки вкл выкл
unsigned char line[WIDTH];
int pcnt = 0;

//these values are substracetd from the generated values to give a shape to the animation
const unsigned char valueMask[8][16] PROGMEM = {
  {32 , 0  , 0  , 0  , 0  , 0  , 0  , 32 , 32 , 0  , 0  , 0  , 0  , 0  , 0  , 32 },
  {64 , 0  , 0  , 0  , 0  , 0  , 0  , 64 , 64 , 0  , 0  , 0  , 0  , 0  , 0  , 64 },
  {96 , 32 , 0  , 0  , 0  , 0  , 32 , 96 , 96 , 32 , 0  , 0  , 0  , 0  , 32 , 96 },
  {128, 64 , 32 , 0  , 0  , 32 , 64 , 128, 128, 64 , 32 , 0  , 0  , 32 , 64 , 128},
  {160, 96 , 64 , 32 , 32 , 64 , 96 , 160, 160, 96 , 64 , 32 , 32 , 64 , 96 , 160},
  {192, 128, 96 , 64 , 64 , 96 , 128, 192, 192, 128, 96 , 64 , 64 , 96 , 128, 192},
  {255, 160, 128, 96 , 96 , 128, 160, 255, 255, 160, 128, 96 , 96 , 128, 160, 255},
  {255, 192, 160, 128, 128, 160, 192, 255, 255, 192, 160, 128, 128, 160, 192, 255}
};

//these are the hues for the fire,
//should be between 0 (red) to about 25 (yellow)
const unsigned char hueMask[8][16] PROGMEM = {
  {1 , 11, 19, 25, 25, 22, 11, 1 , 1 , 11, 19, 25, 25, 22, 11, 1 },
  {1 , 8 , 13, 19, 25, 19, 8 , 1 , 1 , 8 , 13, 19, 25, 19, 8 , 1 },
  {1 , 8 , 13, 16, 19, 16, 8 , 1 , 1 , 8 , 13, 16, 19, 16, 8 , 1 },
  {1 , 5 , 11, 13, 13, 13, 5 , 1 , 1 , 5 , 11, 13, 13, 13, 5 , 1 },
  {1 , 5 , 11, 11, 11, 11, 5 , 1 , 1 , 5 , 11, 11, 11, 11, 5 , 1 },
  {0 , 1 , 5 , 8 , 8 , 5 , 1 , 0 , 0 , 1 , 5 , 8 , 8 , 5 , 1 , 0 },
  {0 , 0 , 1 , 5 , 5 , 1 , 0 , 0 , 0 , 0 , 1 , 5 , 5 , 1 , 0 , 0 },
  {0 , 0 , 0 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 0 , 0 , 0 }
};

void generateLine() {
  for (uint8_t x = 0; x < WIDTH; x++) {
    line[x] = random(64, 255);
  }
}
// draw a frame, interpolating between 2 "key frames"
// @param pcnt percentage of interpolation

void drawFrame(int pcnt) {
  int nextv;

  //each row interpolates with the one before it
  for (unsigned char y = HEIGHT - 1; y > 0; y--) {
    for (unsigned char x = 0; x < WIDTH; x++) {
      uint8_t newX = x;
      if (x > 15) newX = x - 15;
      if (y < 8) {
        nextv =
          (((100.0 - pcnt) * matrixValue[y][newX]
            + pcnt * matrixValue[y - 1][newX]) / 100.0)
          - pgm_read_byte(&(valueMask[y][newX]));

        CRGB color = CHSV(
                       modes[1].scale * 2.5 + pgm_read_byte(&(hueMask[y][newX])), // H
                       255, // S
                       (uint8_t)max(0, nextv) // V
                     );

        leds[getPixelNumber(x, y)] = color;
      } else if (y == 8 && SPARKLES) {
        if (random(0, 20) == 0 && getPixColorXY(x, y - 1) != 0) drawPixelXY(x, y, getPixColorXY(x, y - 1));
        else drawPixelXY(x, y, 0);
      } else if (SPARKLES) {

        // старая версия для яркости
        if (getPixColorXY(x, y - 1) > 0)
          drawPixelXY(x, y, getPixColorXY(x, y - 1));
        else drawPixelXY(x, y, 0);

      }
    }
  }

  //first row interpolates with the "next" line
  for (unsigned char x = 0; x < WIDTH; x++) {
    uint8_t newX = x;
    if (x > 15) newX = x - 15;
    CRGB color = CHSV(
                   modes[1].scale * 2.5 + pgm_read_byte(&(hueMask[0][newX])), // H
                   255,           // S
                   (uint8_t)(((100.0 - pcnt) * matrixValue[0][newX] + pcnt * line[newX]) / 100.0) // V
                 );
    leds[getPixelNumber(newX, 0)] = color;
  }
}

// Randomly generate the next line (matrix row)
void shiftUp() {
  for (uint8_t y = HEIGHT - 1; y > 0; y--) {
    for (uint8_t x = 0; x < WIDTH; x++) {
      uint8_t newX = x;
      if (x > 15) newX = x - 15;
      if (y > 7) continue;
      matrixValue[y][newX] = matrixValue[y - 1][newX];
    }
  }

  for (uint8_t x = 0; x < WIDTH; x++) {
    uint8_t newX = x;
    if (x > 15) newX = x - 15;
    matrixValue[0][newX] = line[newX];
  }
}

void fireRoutine() {

    generateLine();
  
  if (pcnt >= 100) {
    shiftUp();
    generateLine();
    pcnt = 0;
  }
  drawFrame(pcnt);
  pcnt += 30;
}

byte hue;
// ---------------------------------------- радуга ------------------------------------------
void rainbowVertical() {
  hue += modes[1].speed;
  for (byte j = 0; j < HEIGHT; j++) {
    CHSV thisColor = CHSV((byte)(hue + j * modes[1].scale), 255, 255);
    for (byte i = 0; i < WIDTH; i++)
      drawPixelXY(i, j, thisColor);
  }
}
void rainbowHorizontal() {
  hue += modes[1].speed;
  for (byte i = 0; i < WIDTH; i++) {
    CHSV thisColor = CHSV((byte)(hue + i * modes[1].scale), 255, 255);
    for (byte j = 0; j < HEIGHT; j++)
      drawPixelXY(i, j, thisColor);   //leds[getPixelNumber(i, j)] = thisColor;
  }
}

// ---------------------------------------- ЦВЕТА ------------------------------------------
void colorsRoutine() {
  hue += modes[1].scale;
  for (int i = 0; i < NUM_LEDS; i++) {
    leds[i] = CHSV(hue, 255, 255);
  }
}

// --------------------------------- ЦВЕТ ------------------------------------
void colorRoutine() {
  for (int i = 0; i < NUM_LEDS; i++) {
    leds[i] = CHSV(modes[1].scale * 2.5, 255, 255);
  }
}

// ------------------------------ снегопад 2.0 --------------------------------
void snowRoutine() {
  // сдвигаем всё вниз
  for (byte x = 0; x < WIDTH; x++) {
    for (byte y = 0; y < HEIGHT - 1; y++) {
      drawPixelXY(x, y, getPixColorXY(x, y + 1));
    }
  }

  for (byte x = 0; x < WIDTH; x++) {
    // заполняем случайно верхнюю строку
    // а также не даём двум блокам по вертикали вместе быть
    if (getPixColorXY(x, HEIGHT - 2) == 0 && (random(0, modes[1].scale) == 0))
      drawPixelXY(x, HEIGHT - 1, 0xE0FFFF - 0x101010 * random(0, 4));
    else
      drawPixelXY(x, HEIGHT - 1, 0x000000);
  }
}

// ------------------------------ МАТРИЦА ------------------------------
void matrixRoutine() {
  for (byte x = 0; x < WIDTH; x++) {
    // заполняем случайно верхнюю строку
    uint32_t thisColor = getPixColorXY(x, HEIGHT - 1);
    if (thisColor == 0)
      drawPixelXY(x, HEIGHT - 1, 0x00FF00 * (random(0, modes[1].scale) == 0));
    else if (thisColor < 0x002000)
      drawPixelXY(x, HEIGHT - 1, 0);
    else
      drawPixelXY(x, HEIGHT - 1, thisColor - 0x002000);
  }

  // сдвигаем всё вниз
  for (byte x = 0; x < WIDTH; x++) {
    for (byte y = 0; y < HEIGHT - 1; y++) {
      drawPixelXY(x, y, getPixColorXY(x, y + 1));
    }
  }
}

// ----------------------------- СВЕТЛЯКИ ------------------------------
#define LIGHTERS_AM 100
int lightersPos[2][LIGHTERS_AM];
int8_t lightersSpeed[2][LIGHTERS_AM];
CHSV lightersColor[LIGHTERS_AM];
byte loopCounter;

int angle[LIGHTERS_AM];
int speedV[LIGHTERS_AM];
int8_t angleSpeed[LIGHTERS_AM];

void lightersRoutine() {

    randomSeed(millis());
    for (byte i = 0; i < LIGHTERS_AM; i++) {
      lightersPos[0][i] = random(0, WIDTH * 10);
      lightersPos[1][i] = random(0, HEIGHT * 10);
      lightersSpeed[0][i] = random(-10, 10);
      lightersSpeed[1][i] = random(-10, 10);
      lightersColor[i] = CHSV(random(0, 255), 255, 255);
    }
  
  FastLED.clear();
  if (++loopCounter > 20) loopCounter = 0;
  for (byte i = 0; i < modes[1].scale; i++) {
    if (loopCounter == 0) {     // меняем скорость каждые 255 отрисовок
      lightersSpeed[0][i] += random(-3, 4);
      lightersSpeed[1][i] += random(-3, 4);
      lightersSpeed[0][i] = constrain(lightersSpeed[0][i], -20, 20);
      lightersSpeed[1][i] = constrain(lightersSpeed[1][i], -20, 20);
    }

    lightersPos[0][i] += lightersSpeed[0][i];
    lightersPos[1][i] += lightersSpeed[1][i];

    if (lightersPos[0][i] < 0) lightersPos[0][i] = (WIDTH - 1) * 10;
    if (lightersPos[0][i] >= WIDTH * 10) lightersPos[0][i] = 0;

    if (lightersPos[1][i] < 0) {
      lightersPos[1][i] = 0;
      lightersSpeed[1][i] = -lightersSpeed[1][i];
    }
    if (lightersPos[1][i] >= (HEIGHT - 1) * 10) {
      lightersPos[1][i] = (HEIGHT - 1) * 10;
      lightersSpeed[1][i] = -lightersSpeed[1][i];
    }
    drawPixelXY(lightersPos[0][i] / 10, lightersPos[1][i] / 10, lightersColor[i]);
  }
}





















// ******************* НАСТРОЙКИ *****************
// "масштаб" эффектов. Чем меньше, тем крупнее!
#define MADNESS_SCALE 100
#define CLOUD_SCALE 30
#define LAVA_SCALE 50
#define PLASMA_SCALE 30
#define RAINBOW_SCALE 30
#define RAINBOW_S_SCALE 20
#define ZEBRA_SCALE 30
#define FOREST_SCALE 120
#define OCEAN_SCALE 90

// ***************** ДЛЯ РАЗРАБОТЧИКОВ ******************

// The 16 bit version of our coordinates
static uint16_t x;
static uint16_t y;
static uint16_t z;

uint16_t speed = 20; // speed is set dynamically once we've started up
uint16_t scale = 30; // scale is set dynamically once we've started up

// This is the array that we keep our computed noise values in
#define MAX_DIMENSION (max(WIDTH, HEIGHT))
#if (WIDTH > HEIGHT)
uint8_t noise[WIDTH][WIDTH];
#else
uint8_t noise[HEIGHT][HEIGHT];
#endif

CRGBPalette16 currentPalette( PartyColors_p );
uint8_t colorLoop = 1;
uint8_t ihue = 0;

// ******************* СЛУЖЕБНЫЕ *******************
void fillNoiseLED() {
  uint8_t dataSmoothing = 0;
  if ( speed < 50) {
    dataSmoothing = 200 - (speed * 4);
  }
  for (int i = 0; i < MAX_DIMENSION; i++) {
    int ioffset = scale * i;
    for (int j = 0; j < MAX_DIMENSION; j++) {
      int joffset = scale * j;

      uint8_t data = inoise8(x + ioffset, y + joffset, z);

      data = qsub8(data, 16);
      data = qadd8(data, scale8(data, 39));

      if ( dataSmoothing ) {
        uint8_t olddata = noise[i][j];
        uint8_t newdata = scale8( olddata, dataSmoothing) + scale8( data, 256 - dataSmoothing);
        data = newdata;
      }

      noise[i][j] = data;
    }
  }
  z += speed;

  // apply slow drift to X and Y, just for visual variation.
  x += speed / 8;
  y -= speed / 16;

  for (int i = 0; i < WIDTH; i++) {
    for (int j = 0; j < HEIGHT; j++) {
      uint8_t index = noise[j][i];
      uint8_t bri =   noise[i][j];
      // if this palette is a 'loop', add a slowly-changing base value
      if ( colorLoop) {
        index += ihue;
      }
      // brighten up, as the color palette itself often contains the
      // light/dark dynamic range desired
      if ( bri > 127 ) {
        bri = 255;
      } else {
        bri = dim8_raw( bri * 2);
      }
      CRGB color = ColorFromPalette( currentPalette, index, bri);      
      drawPixelXY(i, j, color);   //leds[getPixelNumber(i, j)] = color;
    }
  }
  ihue += 1;
}

void fillnoise8() {
  for (int i = 0; i < MAX_DIMENSION; i++) {
    int ioffset = scale * i;
    for (int j = 0; j < MAX_DIMENSION; j++) {
      int joffset = scale * j;
      noise[i][j] = inoise8(x + ioffset, y + joffset, z);
    }
  }
  z += speed;
}


void madnessNoise() {

    scale = modes[1].scale;
    speed = modes[1].speed;
  
  fillnoise8();
  for (int i = 0; i < WIDTH; i++) {
    for (int j = 0; j < HEIGHT; j++) {
      CRGB thisColor = CHSV(noise[j][i], 255, noise[i][j]);
      drawPixelXY(i, j, thisColor);   //leds[getPixelNumber(i, j)] = CHSV(noise[j][i], 255, noise[i][j]);
    }
  }
  ihue += 1;
}
void rainbowNoise() {
  
    currentPalette = RainbowColors_p;
    scale = modes[1].scale;
    speed = modes[1].speed;
    colorLoop = 1;
  
  fillNoiseLED();
}
void rainbowStripeNoise() {
  
    currentPalette = RainbowStripeColors_p;
    scale = modes[1].scale;
    speed = modes[1].speed;
    colorLoop = 1;
  
  fillNoiseLED();
}
void zebraNoise() {

    // 'black out' all 16 palette entries...
    fill_solid( currentPalette, 16, CRGB::Black);
    // and set every fourth one to white.
    currentPalette[0] = CRGB::White;
    currentPalette[4] = CRGB::White;
    currentPalette[8] = CRGB::White;
    currentPalette[12] = CRGB::White;
    scale = modes[1].scale;
    speed = modes[1].speed;
    colorLoop = 1;
  
  fillNoiseLED();
}
void forestNoise() {
 
    currentPalette = ForestColors_p;
    scale = modes[1].scale;
    speed = modes[1].speed;
    colorLoop = 0;
  
  fillNoiseLED();
}
void oceanNoise() {

    currentPalette = OceanColors_p;
    scale = modes[1].scale;
    speed = modes[1].speed;
    colorLoop = 0;
  

  fillNoiseLED();
}
void plasmaNoise() {
  
    currentPalette = PartyColors_p;
    scale = modes[1].scale;
    speed = modes[1].speed;
    colorLoop = 1;
  
  fillNoiseLED();
}
void cloudNoise() {
  
    currentPalette = CloudColors_p;
    scale = modes[1].scale;
    speed = modes[1].speed;
    colorLoop = 0;
  
  fillNoiseLED();
}
void lavaNoise() {

    currentPalette = LavaColors_p;
    scale = modes[1].scale;
    speed = modes[1].speed;
    colorLoop = 0;
  
  fillNoiseLED();
}












// ****************************** отобранное ******************************

// ****************************** ОГОНЁК ******************************
int16_t position;
boolean direction;

void lighter2() {
  FastLED.clear();
  if (direction) {
    position++;
    if (position > NUM_LEDS - 2) {
      direction = false;
    }
  } else {
    position--;
    if (position < 1) {
      direction = true;
    }
  }
  leds[position] = CHSV(random(0,9)*28, 255, 255);
  //CRGB::White;
}

// ****************************** СВЕТЛЯЧКИ ******************************
#define MAX_SPEED 30
#define BUGS_AMOUNT 3
int16_t speedlight[BUGS_AMOUNT];
int16_t pos[BUGS_AMOUNT];
CRGB bugColors[BUGS_AMOUNT];

void lightBugs() {

    for (int i = 0; i < BUGS_AMOUNT; i++) {
      bugColors[i] = CHSV(random(0, 9) * 28, 255, 255);
      pos[i] = random(0, NUM_LEDS);
      speedlight[i] += random(-5, 6);
    }
  
  FastLED.clear();
  for (int i = 0; i < BUGS_AMOUNT; i++) {
    speedlight[i] += random(-5, 6);
    if (speedlight[i] == 0) speedlight[i] += (-5, 6);

    if (abs(speedlight[i]) > MAX_SPEED) speedlight[i] = 0;
    pos[i] += speedlight[i] / 10;
    if (pos[i] < 0) {
      pos[i] = 0;
      speedlight[i] = -speedlight[i];
    }
    if (pos[i] > NUM_LEDS - 1) {
      pos[i] = NUM_LEDS - 1;
      speedlight[i] = -speedlight[i];
    }
    leds[pos[i]] = bugColors[i];
  }
}

// ****************************** РАДУГА ******************************
void rainbow2() {
  hue += modes[1].speed;
  for (int i = 0; i < NUM_LEDS; i++)
    leds[i] = CHSV((byte)(hue + i * float(255 / NUM_LEDS)), 255, 255);
}


// ****************************** ОГОНЬ ******************************
#define COOLING  55
// SPARKING: What chance (out of 255) is there that a new spark will be lit?
// Higher chance = more roaring fire.  Lower chance = more flickery fire.
// Default 120, suggested range 50-200.
int SPARKING = modes[1].speed;

//SPARKING = modes[1].speed;
void Fire2012WithPalette()
{
  // Array of temperature readings at each simulation cell
  static byte heat[NUM_LEDS];

  // Step 1.  Cool down every cell a little
  for ( int i = 0; i < NUM_LEDS; i++) {
    heat[i] = qsub8( heat[i],  random8(0, ((COOLING * 10) / NUM_LEDS) + 2));
  }

  // Step 2.  Heat from each cell drifts 'up' and diffuses a little
  for ( int k = NUM_LEDS - 1; k >= 2; k--) {
    heat[k] = (heat[k - 1] + heat[k - 2] + heat[k - 2] ) / 3;
  }

  // Step 3.  Randomly ignite new 'sparks' of heat near the bottom
  if ( random8() < SPARKING ) {
    int y = random8(7);
    heat[y] = qadd8( heat[y], random8(160, 255) );
  }

  // Step 4.  Map from heat cells to LED colors
  for ( int j = 0; j < NUM_LEDS; j++) {
    // Scale the heat value from 0-255 down to 0-240
    // for best results with color palettes.
    byte colorindex = scale8( heat[j], 240);
    CRGB color = ColorFromPalette( gPal, colorindex);
    int pixelnumber;

      pixelnumber = j;
    
    leds[pixelnumber] = color;
  }
}

void fire() {
  random16_add_entropy( rand());
  Fire2012WithPalette(); // run simulation frame, using palette colors
}





//------------------------------blynk, точка доступа и wifi----------------------------------------------//
bool shouldSaveConfig = false;//флаг для сохранения данных
char blynk_token[34] = "";
SimpleTimer timer;

void saveConfigCallback () {//обратный вызов, уведомляющий нас о необходимости сохранить конфигурацию
  Serial.println("Данные требуется сохранить, т.к. внесены изменения");//Следует сохранить конфигурацию
  shouldSaveConfig = true;//Меняем флаг shouldSaveConfig на true
}
//------------------------------blynk, точка доступа и wifi----------------------------------------------//






void setup() {

  // FastLED.addLeds<WS2811, LED_PIN>(leds, NUM_LEDS);
 // Serial.begin(9600);

  FastLED.addLeds<WS2811, LED_PIN, GRB>(leds, NUM_LEDS).setCorrection( TypicalLEDStrip );
  if (CURRENT_LIMIT > 0) FastLED.setMaxPowerInVoltsAndMilliamps(5, CURRENT_LIMIT / NUM_STRIPS);
  FastLED.setBrightness(brightness);
  FastLED.show();

  randomSeed(analogRead(0));

  if (FIRE_PALETTE == 0) gPal = HeatColors_p;
  else if (FIRE_PALETTE == 1) gPal = CRGBPalette16( CRGB::Black, CRGB::Red, CRGB::Yellow, CRGB::White);
  else if (FIRE_PALETTE == 2) gPal = CRGBPalette16( CRGB::Black, CRGB::Blue, CRGB::Aqua,  CRGB::White);
  else if (FIRE_PALETTE == 3) gPal = CRGBPalette16( CRGB::Black, CRGB::Red, CRGB::White);















  //------------------------------blynk, точка доступа и wifi----------------------------------------------//
  Serial.println("Монтируем файловую систему...");////читаем конфигурацию из FS json

  if (SPIFFS.begin()) {
    Serial.println("Файловая система смонтирована");
    if (SPIFFS.exists("/config.json")) {
  //файл существует, чтение и загрузка
      Serial.println("Чтение конфигурационного файла");
      File configFile = SPIFFS.open("/config.json", "r");
      if (configFile) {
        Serial.println("Конфигурационный файл открыт");
        size_t size = configFile.size();
    //Выделить буфер для хранения содержимого файла
        std::unique_ptr<char[]> buf(new char[size]);

        configFile.readBytes(buf.get(), size);
        DynamicJsonBuffer jsonBuffer;
        JsonObject& json = jsonBuffer.parseObject(buf.get());
        json.printTo(Serial);
        if (json.success()) {
          Serial.println("\nparsed json");          
          strcpy(blynk_token, json["blynk_token"]);

        } else {
          Serial.println("Не удалось загрузить конфигурацию json");
        }
      }
    }
  } else {
    Serial.println("Неудалось смонтировать файловую систему");
  }
  WiFiManagerParameter custom_blynk_token("blynk", "blynk token", blynk_token, 33);//was 32 length
  
  WiFiManager wifiManager;

  wifiManager.setSaveConfigCallback(saveConfigCallback);
  
  wifiManager.addParameter(&custom_blynk_token);
   

//проверяем, сохранились ли настройки токена от блинка, если нет, то очищаем также настройки подключения к wifi
  strcpy(blynk_token, custom_blynk_token.getValue());//прочтем обновленные параметры
  String S = blynk_token;
   
    if (S.length() == 0)
    {
      wifiManager.resetSettings();      
    }

      
    if (!wifiManager.autoConnect("SmartLed", "12345678")) {//Задайте здесь параметры точки доступа (SSID, password)
    Serial.println("Не удалось подключиться и истекло время ожидания");
    delay(3000);//перезагрузите и попробуйте снова, или, возможно, положить его в глубокий сон
    ESP.reset();
    delay(5000);
   }

  Serial.println("Подключение... :)");//if you get here you have connected to the WiFi

  strcpy(blynk_token, custom_blynk_token.getValue());//прочтем обновленные параметры
  
//сохранить пользовательские параметры в FS
  if (shouldSaveConfig) {  //прочтем обновленные параметры
    Serial.println("saving config");
    DynamicJsonBuffer jsonBuffer;
    JsonObject& json = jsonBuffer.createObject();
    json["blynk_token"] = blynk_token;

    File configFile = SPIFFS.open("/config.json", "w");
    if (!configFile) {
      Serial.println("Не удалось открыть файл конфигурации для записи");
    }

    json.printTo(Serial);
    json.printTo(configFile);
    configFile.close();
//конец сохранения
  }

  Serial.println("local ip");
  Serial.println(WiFi.localIP());
  
  if (WiFi.status() == WL_CONNECTED) {

  Blynk.config(blynk_token);
  Blynk.connect();
  Serial.println("соединение с WiFi-сетью успешно установлено"); 
  Serial.print("Подключение к Blynk ");
  Serial.println(Blynk.connected());
  }
  else
  {
    Serial.println("Нет соединения с WiFi"); 
  }
//------------------------------blynk, точка доступа и wifi----------------------------------------------//


  
}


BLYNK_WRITE(V1) {
  switch (param.asInt())
  {
    /*case 1: // Item 1
      sparklesRoutine();
      FastLED.show();
      break;*/
    
    case 2: // огонь
      fireRoutine(); //
      FastLED.show();
      break;    
/*
    case 3: // Item 1
      rainbowVertical(); //
      FastLED.show();
      break;    */

    case 4: // Item 1
      rainbowHorizontal();//
      FastLED.show();
      break;    

    case 5: // смена цветов
      colorsRoutine(); 
      FastLED.show();
      break;    

    case 6: // Обычный цвет
      colorRoutine(); 
      FastLED.show();
      break;    

    case 7: // конфети
      snowRoutine(); 
      FastLED.show();
      break;         

    case 8: // матрица
      matrixRoutine();
      FastLED.show();
      break;     

    case 9: // Настраиваемые светляки
      lightersRoutine();
      FastLED.show();
      break;       

    case 10: // Безумие
      madnessNoise();
      FastLED.show();
      break;         

    case 11: // Облако
      cloudNoise();
      FastLED.show();
      break; 

    case 12: // Лава
      lavaNoise();
      FastLED.show();
      break; 

    case 13: // Плазма
      plasmaNoise();
      FastLED.show();
      break; 

    case 14: // Радуга очередная
      rainbowNoise();
      FastLED.show();
      break; 

    case 15: // Полоса радуги
      rainbowStripeNoise();
      FastLED.show();
      break; 

    case 16: // Зебра
      zebraNoise();
      FastLED.show();
      break; 

    case 17: // Лес
      forestNoise();
      FastLED.show();
      break;      
      
    case 18: // Океан
      oceanNoise();
      FastLED.show();
      break;                                                                        
//отобранное
    case 19: // пиксель 
      lighter2();
      FastLED.show();
      break; 


    case 20: // светляки 
      lightBugs();
      FastLED.show();
      break;       


    case 21: // радуга rainbow2
      rainbow2();
      FastLED.show();
      break;     

    case 22: // Свеча
      fire();
      FastLED.show();
      break;                

    default:
      Serial.println("Unknown item selected");
  }
}

//считываем максимальный показатель влажности с регулятора slider из моб.приложения
  BLYNK_WRITE(V2)
  {
    modes[1].brightness = param.asInt(); 
    //test.brightness = param.asInt();
  }
  BLYNK_WRITE(V3)
  {
    modes[1].speed = param.asInt(); 
  }
  BLYNK_WRITE(V4)
  {
    modes[1].scale = param.asInt(); 
  }


void loop() {
  Blynk.syncVirtual(V1);
  Blynk.syncVirtual(V2);
  Blynk.syncVirtual(V3);
  Blynk.syncVirtual(V4);
  FastLED.setBrightness(modes[1].brightness);
 
  Blynk.run();//Initiates Blynk
  timer.run();//Initiates SimpleTimer  
}
